(load "./4.1_2.ss")
(define (eval exp env)
  (cond ((self-evaluating? exp) exp)
    ((variable? exp) (lookup-variable-value exp env))
    ((quoted? exp) (text-of-quotation exp))
    ((assignment? exp) (eval-assignment exp env))
    ((definition? exp) 
     (eval-definition exp env))
    ((unbind!? exp)
     (eval-unbind exp env))
    ((if? exp) (eval-if exp env))
    ((lambda? exp)
     (make-procedure (lambda-parameters exp)
                     (lambda-body exp)
                     env))
    ((let? exp)
     (eval (let->combination exp) env))
    ((let*? exp)
     (eval (let*->nested-lets exp) env))
    ((begin? exp)
     (eval-sequence (begin-actions exp) env))
    ((cond? exp) (eval (cond->if exp) env))
    ((and? exp) (eval-and exp env))
    ((or? exp) (eval-or exp env))
    ((while? exp) (eval (while->if exp) env))
    ((application? exp)
     (apply (eval (operator exp) env)
            (list-of-values (operands exp) env)))
    (else
      (error "Unknown expression type -- EVAL" exp))))

(define (unbind!? exp)
  (tagged-list? exp 'unbind!))

(define (eval-unbind exp env)
  (unbind-variable! (cadr exp)
                    env)
  'ok)

;手抜き
;(define (unbind-variable! var env)
;  (define (env-loop env)
;    (define (scan vars vals)
;      (cond ((null? vars)
;             (env-loop (enclosing-environment env)))
;        ((eq? var (car vars))
;         (set-car! vars '*garbage*))
;        (else (scan (cdr vars) (cdr vals)))))
;    (if (eq? env the-empty-environment)
;      (error "Unbound variable" var)
;      (let ((frame (first-frame env)))
;        (scan (frame-variables frame)
;              (frame-values frame)))))
;  (env-loop env))

; primitive なものも unbind される
; すべてのフレームから結像を除去する
(define (unbind-variable! var env)
  (define (env-loop env)
    (define (scan vars vals)
      (cond ((null? vars)
             (env-loop (enclosing-environment env)))
        ((eq? var (car vars))
         (set-car! vars (cadr vars))
         (set-cdr! vars (cddr vars))
         (set-car! vals (cadr vals))
         (set-cdr! vals (cddr vals)))
        (else (scan (cdr vars) (cdr vals)))))
    (if (eq? env the-empty-environment)
      (error "Unbound variable" var)
      (let ((frame (first-frame env)))
        (scan (frame-variables frame)
              (frame-values frame)))))
  (env-loop env))

(define the-global-environment (setup-environment))

(define-variable! 'b 1 the-global-environment)
(lookup-variable-value 'b the-global-environment)
(display the-global-environment)
(unbind-variable! 'b the-global-environment)
(lookup-variable-value 'b the-global-environment)
(display the-global-environment)

(driver-loop)
(define i 0)
(display i)
(unbind! i)
(display i)
end
